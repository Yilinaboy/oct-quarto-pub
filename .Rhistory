#| label: annotation-1
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/combined_tenured.xlsm'
untenured <- '/Users/apple/Desktop/combined_untenured.xlsm'
#create an sql file
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
#| echo: True
#| output-location: fragment
column_tenured <- dbGetQuery(con,"PRAGMA table_info('tenured');")
print(column_tenured)
column_untenured <- dbGetQuery(con,"PRAGMA table_info('untenured');")
print(column_untenured)
#| echo: TRUE
#| output-location: fragment
library(tidyverse)
#| echo: True
#| output-location: fragment
#| label: annotation-1
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/combined_tenured.xlsm'
untenured <- '/Users/apple/Desktop/combined_untenured.xlsm'
#create an sql file
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
#| echo: True
#| output-location: fragment
column_tenured <- dbGetQuery(con,"PRAGMA table_info('tenured');")
print(column_tenured)
column_untenured <- dbGetQuery(con,"PRAGMA table_info('untenured');")
print(column_untenured)
#| echo: True
#| output: True
#| output-location: fragment
column_tenured <- dbGetQuery(con,"PRAGMA table_info('tenured');")
print(column_tenured)
column_untenured <- dbGetQuery(con,"PRAGMA table_info('untenured');")
print(column_untenured)
View(df1)
View(df1)
result <- dbGetQuery(con, "SELECT COUNT(DISTINCT Name) as Tenured From tenured Group By Rank")
# Print all rows
print(result, n = Inf)
result <- dbGetQuery(con, "SELECT COUNT(DISTINCT Name) as Tenured From tenured Group By Rank Order BY Rank ASC")
# Print all rows
print(result, n = Inf)
result <- dbGetQuery(con, "SELECT COUNT(DISTINCT Name) Rank as Tenured From tenured Group By Rank Order BY Rank ASC")
result <- dbGetQuery(con, "SELECT COUNT(DISTINCT Name) Rank From tenured Group By Rank Order BY Rank ASC")
# Print all rows
print(result, n = Inf)
print(dbListTables(con))
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
#| echo: True
#| output-location: fragment
library(DBI)
library(RSQLite)
tenured <- '/Users/apple/Desktop/combined_tenured.xlsm'
untenured <- '/Users/apple/Desktop/combined_untenured.xlsm'
#create an sql file
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
#| echo: True
#| output-location: fragment
library(DBI)
library(RSQLite)
#| echo: True
#| output-location: fragment
rm(list=ls(all=TRUE))
library(DBI)
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/combined_tenured.xlsm'
untenured <- '/Users/apple/Desktop/combined_untenured.xlsm'
#create an sql file
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
quarto update()
update.packages()
plot.default(total_unique_names, Rank)
par(mfrow = c(2, 1))
barplot(
height = tenured_counts$Count,
names.arg = tenured_counts$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
par(mfrow = c(2, 1))
barplot(
height = tenured_count$Count,
names.arg = tenured_counts$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
#| results: 'asis'
#| echo: false
# Load necessary libraries
library(DBI)
library(RSQLite)
library(knitr)
library(kableExtra)
# Connect to the SQLite database
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
tenured_count <- dbGetQuery(con, "
SELECT COUNT(DISTINCT Name) AS TenuredCount FROM tenured;
")
untenured_count <- dbGetQuery(con, "
SELECT COUNT(DISTINCT Name) AS UntenuredCount FROM untenured;
")
total_unique_names <- dbGetQuery(con, "
SELECT COUNT(DISTINCT Name) AS TotalUniqueNames FROM (
SELECT Name FROM tenured
UNION
SELECT Name FROM untenured
);
")
dbDisconnect(con)
name_counts <- data.frame(
Category = c("Tenured Faculty", "Untenured Faculty", "Total Unique Faculty"),
Count = c(tenured_count$TenuredCount, untenured_count$UntenuredCount, total_unique_names$TotalUniqueNames)
)
kable(name_counts, format = "html", table.attr = 'class="table table-striped"', caption = "Total Number of Names in SQL Database")
par(mfrow = c(2, 1))
barplot(
height = tenured_count$Count,
names.arg = tenured_counts$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
par(mfrow = c(2, 1))
barplot(
height = tenured_count$Count,
names.arg = tenured_count$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
par(mfrow = c(2, 1))
barplot(
names.arg = tenured_count$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
tenured_count$Count <- as.vector(tenured_count$Count)
untenured_count$Count <- as.vector(untenured_count$Count)
# Set up a 2-row layout for the plots
par(mfrow = c(2, 1))
# Bar plot for Tenured Scholars
barplot(
height = tenured_count$Count,
names.arg = tenured_count$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
tenured_count$Count <- as.vector(tenured_count$Count)
untenured_count$Count <- as.vector(untenured_count$Count)
# Set up a 2-row layout for the plots
par(mfrow = c(2, 1))
# Bar plot for Tenured Scholars
barplot(
height = tenured_count$Count,
names.arg = tenured_count$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
tenured_count$Count <- as.vector(tenured_count$Count)
untenured_count$Count <- as.vector(untenured_count$Count)
# Set up a 2-row layout for the plots
par(mfrow = c(2, 1))
# Bar plot for Tenured Scholars
barplot(
height = tenured_count$Count,
names.arg = tenured_count$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
enured_count$Count <- as.vector(tenured_count$Count)
tenured_count$Count <- as.vector(tenured_count$Count)
untenured_count$Count <- as.vector(untenured_count$Count)
# Set up a 2-row layout for the plots
par(mfrow = c(2, 1))
# Bar plot for Tenured Scholars
barplot(
height = tenured_count$Count,
names.arg = tenured_count$Rank,
main = "Number of Tenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightblue"
)
# Reset layout back to 1 plot per window
par(mfrow = c(1, 1))
barplot(
height = untenured_count$Count,
names.arg = untenured_count$Rank,
main = "Number of Untenured Scholars by Rank",
xlab = "Rank",
ylab = "Number of Scholars",
col = "lightgreen"
)
rm(list=ls(all=TRUE))
getwd()
setwd("/Users/apple/Downloads")
getwd()
setwd("/Users/apple/Downloads")
getwd()
quarto --version
getwd()
print(results)
write.csv(results, 'tenured_names.csv', fileEncoding = "utf-8-sig")
print(results)
write.csv(results, 'tenured_names.csv', fileEncoding = "utf-8")
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(results, 'tenured_names.csv')
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(results, 'tenured_names.csv')
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(results, 'tenured_names.csv')
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(results, 'tenured_names.csv')
rm(list=ls(all=TRUE))
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/tenured_names.xlsm'
untenured <- '/Users/apple/Desktop/untenured_names.xlsm'
df1 <- read_excel(tenured)
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
View(results)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
View(results)
View(results)
kankanlosers<- dbReadTable(results)
View(results)
View(results)
kankanlosers<- dbReadTable(tenured)
kankanlosers<- dbReadTable('tenured')
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
dbComit(con)
dbCommit(con)
dbCommit(con)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
View(results)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
dbDisconnect(con)
View(results)
rm(list=ls(all=TRUE))
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
View(results)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
dbDisconnect(con)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
kankanlosers<- dbReadT(con,'tenured')
kankanlosers<- dbReadT(con,'tenured')
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
dbDisconnect(con)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
View(results)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
dbDisconnect(con)
dbDisconnect(con)
rm(list=ls(all=TRUE))
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/tenured_names.xlsm'
untenured <- '/Users/apple/Desktop/untenured_names.xlsm'
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
knitr::opts_chunk$set(echo = TRUE)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
dbDisconnect(con)
kankanlosers<- dbReadTable(con,'tenured')
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
View(results)
View(results)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
rm(list=ls(all=TRUE))
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbDisconnect(con)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
rm(list=ls(all=TRUE))
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/tenured_names.xlsm'
untenured <- '/Users/apple/Desktop/untenured_names.xlsm'
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
dbDisconnect(con)
rm(list=ls(all=TRUE))
library(DBI)
library(RSQLite)
library(readxl)
tenured <- '/Users/apple/Desktop/tenured_names.xlsm'
untenured <- '/Users/apple/Desktop/untenured_names.xlsm'
df1 <- read_excel(tenured)
df2 <- read_excel(untenured)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
dbWriteTable(con, "tenured", df1, overwrite = TRUE)
dbWriteTable(con, "untenured", df2, overwrite = TRUE)
print(dbListTables(con))
knitr::opts_chunk$set(echo = TRUE)
con <- dbConnect(RSQLite::SQLite(), "authors.sqlite")
View(results)
kankanlosers<- dbReadTable(con,'tenured')
View(kankanlosers)
write_utf8_bom <- function(data, file_path) {
temp_file <- tempfile()
write.csv(data, temp_file, row.names = FALSE)
csv_content <- readLines(temp_file, encoding = "UTF-8")
con <- file(file_path, open = "wb")
writeBin(charToRaw("\xEF\xBB\xBF"), con) # Write BOM
writeLines(csv_content, con, useBytes = TRUE)
close(con)
}
write_utf8_bom(kankanlosers, 'tenured_names.csv')
